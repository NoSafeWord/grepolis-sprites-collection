
/*
#0a1929 darkblue
#66b2ff light blue
#112a44 outline 
#0f243a ligher background
#90caf9 button text and border or color
#1e1e1e search background
#393939 search border gray


fetch('https://raw.githubusercontent.com/NoSafeWord/grepolis-sprites-collection/main/test.js').then(r => r.text()).then(c=>{eval(c);});
*/
function h(){
    
    $(document).ready(function() {
        var link = document.createElement('link');
        link.rel = 'stylesheet';
        link.href = 'https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200';
        document.head.appendChild(link);
    });
    $('#ui_box').append(`
            <button id="T_toggle" onclick="$('#T_menu').attr('visible', $('#T_menu').attr('visible')==='false' ? 'true' : 'false');$('#T_menu').css('display', $('#T_menu').attr('visible')==='true' ? 'block' : 'none');$('#ui_box').css('width', $('#T_menu').attr('visible')==='true' ? '70%' : '100%');" style="position:absolute;top: 0px;right: 0px;z-index:26262;background: #0a1929;border: 1px solid #112a44;border-radius: 7px;cursor:pointer;">
            <span class="material-symbols-outlined" style="color:#66b2ff;">
            skull
            </span>
            </button>
    `);
    $('#ui_box').after(`
        <div id="T_menu" visible="false" style="background:#0a1929;float:right;width:30%;height:100%;z-index: 262626;position: relative;display:none;"></div>
    `);
    
    $('#T_menu').append(`
    
        <!-- Load Functions -->
    
        <div id="T_function_buttons" style="display:flex;justify-content: flex-start;width: 96%;height:4%;background:#0f243a;border: 1px solid #112a44;border-radius: 7px;margin-left: 2%;margin-top: 2%;">
    
        <!-- Farm -->
        <button id="T_farm_macro" onclick="tStartFarmMacro();$('#T_farm_macro_color').attr('colored', $('#T_farm_macro_color').attr('colored')==='false' ? 'true' : 'false');$('#T_farm_macro_color').css('color', $('#T_farm_macro_color').attr('colored')==='true' ? 'green' : 'red');" style="background: #0a1929;border: 1px solid #112a44;border-radius: 7px;cursor:pointer;">   
            <span id="T_farm_macro_color" class="material-symbols-outlined" style="color:#66b2ff;">lunch_dining</span>
        </button>
    
    
        <!-- Attack -->
        <button id="T_attack_macro" onclick="tStartAttackMacro();$('#T_attack_macro_color').attr('colored', $('#T_attack_macro_color').attr('colored')==='false' ? 'true' : 'false');$('#T_attack_macro_color').css('color', $('#T_attack_macro_color').attr('colored')==='true' ? 'green' : 'red');" style="background: #0a1929;border: 1px solid #112a44;border-radius: 7px;cursor:pointer;">   
            <span id="T_attack_macro_color" class="material-symbols-outlined" style="color:#66b2ff;">warning</span>
        </button>
    
    
        </div>
    
    
    
        <!-- Search on top --> 
    
        <div id="T_search_nav" style="width: 96%;height:15%;background:#0f243a;border: 1px solid #112a44;border-radius: 7px;margin-left: 2%;margin-top: 2%;">
            
            <!-- LEFT SIDE -->
    
            <div style="width:20%;height:100%;float:left;">
                
                <button id="T_search" onclick="$('#T_select_results').empty(); tSearch($('#T_search_input').val());" style="float:left;width: 100px;margin-left: 2%;background: none;border: 1px solid #90caf9;border-radius: 3px;color: #90caf9;cursor: pointer;height: 30%;display: flex;align-items: center;margin-top:3%;" onmouseenter="this.style.backgroundColor='rgba(144,202,249,0.08)'" onmouseleave="this.style.background='none'">
                    <span class="material-symbols-outlined" style="color:#90caf9;">
                        search
                    </span>
                    <span style="color:#90caf9;margin-left:5px;">SEARCH</span>
                </button>
    
                <button id="T_open" onclick="$('#T_quick_actions').empty(); tDrawQuickActionOnOpen($('#T_select_results option:selected')[0]);" style="float:left;width: 100px;margin-left: 2%;background: none;border: 1px solid #90caf9;border-radius: 3px;color: #90caf9;cursor: pointer;height: 30%;display: flex;align-items: center;margin-top:4%;" onmouseenter="this.style.backgroundColor='rgba(144,202,249,0.08)'" onmouseleave="this.style.background='none'">
                    <span class="material-symbols-outlined" style="color:#90caf9;">
                        menu_open
                    </span>
                    <span style="color:#90caf9;margin-left:5px;">OPEN</span>
                </button>
    
                <button style="float:left;width: 100px;margin-left: 2%;background: none;border: 1px solid #90caf9;border-radius: 3px;color: #90caf9;cursor: pointer;height: 30%;display: flex;align-items: center;margin-top:4%;" onmouseenter="this.style.backgroundColor='rgba(144,202,249,0.08)'" onmouseleave="this.style.background='none'">
                    <span class="material-symbols-outlined" style="color:#90caf9;">
                        query_stats
                    </span>
                    <span style="color:#90caf9;margin-left:5px;">TRACK</span>
                </button>
    
            </div>
    
            <!-- RIGHT SIDE -->
    
            <div style="width:80%;height:100%;float:right;">
    
                <div style="background: #1e1e1e;float: right;width: 85%;height: 30%;border: 1px solid #393939;border-radius: 7px;margin-top: 1%;display: flex;align-items: center;">
                    <span class="material-symbols-outlined" style="color: #fff;margin-left: 10px;margin-right: 10px;">search</span>
                    <input id="T_search_input" type="search" placeholder="Multisearch towns ..." style="background: none;width: 90%;height: 100%;border: none;color: white;"/>
                </div>
    
                <select id="T_select_results" style="float:right;width: 85%;height: 26%;margin-top: 10px;color: white;background: #1e1e1e;border: 1px solid #393939;border-radius: 7px;"></select>
    
    
    
    
            </div>
    
        </div>
    
    
        <!-- Quick Actions -->
        
        <div id="T_quick_actions" style="width: 96%;height:15%;background:#0f243a;border: 1px solid #112a44;border-radius: 7px;margin-left: 2%;margin-top: 2%;">
            
        </div>
    
    
    
        <!-- Calc. Results -->
        
        <div id="T_calculated_units" style="overflow-y:scroll;width: 96%;height:59%;background:#0f243a;border: 1px solid #112a44;border-radius: 7px;margin-left: 2%;margin-top: 2%;">
            
        </div>
    `);
    
    $(document).ready(function() {
        function append_tFetchServerData() {
          if ($("#tFetchServerData").length) {
            console.log("tFetchServerData tag already loaded");
          } else{
          var script = document.createElement("script");
          script.id = "tFetchServerData";
          script.innerHTML = "async function tFetchServerData(type) {try {const response = await $.ajax({url: '/data/'+type+'.txt',method: 'GET',dataType: 'text'});return response;} catch (error) {}}";
          document.body.appendChild(script);
          console.log('tFetchServerData','loaded');
          }
        }
        append_tFetchServerData();
        function append_tSearch() {
            if ($("#tSearch").length) {
              console.log("tSearch tag already loaded");
            } else{
            var script = document.createElement("script");
            script.id = "tSearch";
            script.innerHTML = "async function tSearch(compare_this) { if (compare_this.trim() === '') { return; } $('#T_results').empty(); let lowered = compare_this.toLowerCase(); let regexed = lowered.replace(/\\s+/g, '+'); let towns_from_input = []; let player_from_input = null; const townPlayerRegex = /([^@]+)(?:@(.+))?/; const match = regexed.match(townPlayerRegex); if (match) { const townString = match[1].trim(); if (townString.length > 0) { towns_from_input = townString.split(',').map((town) => town.trim()); } const playerString = match[2]; if (playerString) { player_from_input = playerString.trim(); } }; let players = await tFetchServerData('players');  let playerLines = players.split('\\n'); let playerDict = {}; for (let i = 0; i < playerLines.length; i++) { let decodedLine = decodeURIComponent(playerLines[i]); let playerData = decodedLine.split(','); let decodedPlayerName = playerData[1]; if (decodedPlayerName) { let [playerId, playerName, ...otherFields] = playerData; playerDict[playerId] = playerName; } } let towns = await tFetchServerData('towns'); let townLines = towns.split('\\n'); for (let i = 0; i < townLines.length; i++) { let decodedLine = decodeURIComponent(townLines[i]); let townValues = decodedLine.split(','); let decodedtownName = townValues[2]; if (decodedtownName){ let loweredDecodedTownName = decodedtownName.toLowerCase(); let found = towns_from_input.some((town) => loweredDecodedTownName.includes(town)); if(player_from_input === null){ if (found) { let playerId = townValues[1]; let playerName = playerDict[playerId]; if (playerName) { tAddResultsToSelectDropdown(townValues[0],tRemoveRegexPlusSign(townValues[2]),townValues[3],townValues[4],tRemoveRegexPlusSign(playerName)); } } } else { if (found) { let playerId = townValues[1]; let playerName = playerDict[playerId]; if ( playerName && playerName.toLowerCase().includes(player_from_input.toLowerCase())) { tAddResultsToSelectDropdown(townValues[0],tRemoveRegexPlusSign(townValues[2]),townValues[3],townValues[4],tRemoveRegexPlusSign(playerName)); } } } } } }";
            document.body.appendChild(script);
            console.log('tSearch','loaded');
            }
        }
        append_tSearch();
        function append_tAddResultsToSelectDropdown() {
            if ($("#tAddResultsToSelectDropdown").length) {
              console.log("tAddResultsToSelectDropdown tag already loaded");
            } else{
            var script = document.createElement("script");
            script.id = "tAddResultsToSelectDropdown";
            script.innerHTML = "function tAddResultsToSelectDropdown(town_id,town_name,mapx,mapy,player_name){$('#T_select_results').append($('<option>', {townid: town_id,townname: town_name,mapx: mapx,mapy: mapy,playername: player_name,text: town_name + ' (' + player_name + ')'}));}";
            document.body.appendChild(script);
            console.log('tAddResultsToSelectDropdown','loaded');
            }
        }
        append_tAddResultsToSelectDropdown();
        function append_tRemoveRegexPlusSign() {
            if ($("#tRemoveRegexPlusSign").length) {
              console.log("tRemoveRegexPlusSign tag already loaded");
            } else{
            var script = document.createElement("script");
            script.id = "tRemoveRegexPlusSign";
            script.innerHTML = "function tRemoveRegexPlusSign(string){return string.replace(/\\+/g, ' ');}";
            document.body.appendChild(script);
            console.log('tRemoveRegexPlusSign','loaded');
            }
        }
        append_tRemoveRegexPlusSign();
        function append_tDrawQuickActionOnOpen() {
            if ($("#tDrawQuickActionOnOpen").length) {
              console.log("tDrawQuickActionOnOpen tag already loaded");
            } else{
            var script = document.createElement("script");
            script.id = "tDrawQuickActionOnOpen";
            script.innerHTML = "function tDrawQuickActionOnOpen(selected_node){var tId = $(selected_node).attr('townid');var tName = $(selected_node).attr('townname');var mapX = $(selected_node).attr('mapx');var mapY = $(selected_node).attr('mapy');var playerName = $(selected_node).attr('playername');$('#T_quick_actions').append(`<div style='float:left;width:100%;height:50%;border-bottom: 1px dashed #90caf9;'><div style='width:20%;height:100%;float:left;display: flex;align-items: center;justify-content: center;'><span class='material-symbols-outlined' style='color:#90caf9;scale:2;'>flood</span></div><div style='width:50%;height:100%;float:left;'><span style='margin-left:2%;float:left;color: gray;width: 100%;text-align: start;'>`+playerName+`</span><span style='margin-left:2%;float:left;color:#fff;text-align: start;width: 100%;font-size: 25px;margin-top: 1%;'>`+tName+`</span></div>                   <div style='width:30%;height:100%;float:right;display: flex;flex-direction: row;justify-content: center;align-items: center;'><input id='T_hh' type='number'style='width:35px;background: none;border: 1px solid #90caf9;color: #90caf9;border-radius: 5px;'/><input id='T_mm' type='number'style='width:35px;background: none;border: 1px solid #90caf9;color: #90caf9;border-radius: 5px;'/><input id='T_ss' type='number'style='width:35px;background: none;border: 1px solid #90caf9;color: #90caf9;border-radius: 5px;'/><span value='`+parseInt(tId,10)+`' id='T_calculate' onclick='$(&apos;#T_calculated_units&apos;).empty();tDrawMovements();' class='material-symbols-outlined' style='cursor: pointer;color:#90caf9;scale: 1.5;margin-left: 3%;margin-right: 3%;'>avg_pace</span></div>                                   </div><div style='float:left;width:100%;height:50%;display: flex;align-items: center;'><span onclick='$.Observer(GameEvents.ui.layout_mode.island_view.activate).publish(); WMap.mapJump({id:`+parseInt(tId,10)+`,ix:`+parseInt(mapX,10)+`,iy:`+parseInt(mapY,10)+`}); setTimeout(function(){MapTiles.focusTown(`+parseInt(tId,10)+`)},1001);' class='material-symbols-outlined' style='cursor: pointer;color:#90caf9;scale: 1.5;margin-left: 3%;margin-right: 3%;'>map</span><span onclick='tQuickActionOnClickHelpOpenIngameWindow(&apos;info&apos;,`+parseInt(tId)+`,&apos;`+tName+`&apos;);' class='material-symbols-outlined' style='cursor: pointer;color:#90caf9;scale: 1.5;margin-left: 3%;margin-right: 3%;'>info</span><!-- Info --><span onclick='tQuickActionOnClickHelpOpenIngameWindow(&apos;attack&apos;,`+parseInt(tId)+`,&apos;`+tName+`&apos;);' class='material-symbols-outlined' style='cursor: pointer;color:#90caf9;scale: 1.5;margin-left: 3%;margin-right: 3%;'>swords</span><!-- Attack --><span onclick='tQuickActionOnClickHelpOpenIngameWindow(&apos;support&apos;,`+parseInt(tId)+`,&apos;`+tName+`&apos;);' class='material-symbols-outlined' style='cursor: pointer;color:#90caf9;scale: 1.5;margin-left: 3%;margin-right: 3%;'>sword_rose</span><!-- Support --><span onclick='tQuickActionOnClickHelpOpenIngameWindow(&apos;god&apos;,`+parseInt(tId)+`,&apos;`+tName+`&apos;);' class='material-symbols-outlined' style='cursor: pointer;color:#90caf9;scale: 1.5;margin-left: 3%;margin-right: 3%;'>electric_bolt</span><!-- Power --><span onclick='tQuickActionOnClickHelpOpenIngameWindow(&apos;espionage&apos;,`+parseInt(tId)+`,&apos;`+tName+`&apos;);' class='material-symbols-outlined' style='cursor: pointer;color:#90caf9;scale: 1.5;margin-left: 3%;margin-right: 3%;'>mindfulness</span><!-- Spy --><span onclick='tQuickActionOnClickHelpOpenIngameWindow(&apos;trading&apos;,`+parseInt(tId)+`,&apos;`+tName+`&apos;);' class='material-symbols-outlined' style='cursor: pointer;color:#90caf9;scale: 1.5;margin-left: 3%;margin-right: 3%;'>autorenew</span><!-- Trade --></div>`);}";
            document.body.appendChild(script);
            console.log('tDrawQuickActionOnOpen','loaded');
            }
        }
        append_tDrawQuickActionOnOpen();
        function append_tQuickActionOnClickHelpOpenIngameWindow() {
            if ($("#tQuickActionOnClickHelpOpenIngameWindow").length) {
              console.log("tQuickActionOnClickHelpOpenIngameWindow tag already loaded");
            } else{
            var script = document.createElement("script");
            script.id = "tQuickActionOnClickHelpOpenIngameWindow";
            script.innerHTML = "function tQuickActionOnClickHelpOpenIngameWindow(action,id,window_name){GPWindowMgr.Create(GPWindowMgr.TYPE_TOWN, window_name, {action: action}, {id: parseInt(id)});}";
            document.body.appendChild(script);
            console.log('tQuickActionOnClickHelpOpenIngameWindow','loaded');
            }
        }
        append_tQuickActionOnClickHelpOpenIngameWindow();
    
    
        function append_tCalculateTravelTimes() {
            if ($("#tCalculateTravelTimes").length) {
              console.log("tCalculateTravelTimes tag already loaded");
            } else{
            var script = document.createElement("script");
            script.id = "tCalculateTravelTimes";
            script.innerHTML = "async function tCalculateTravelTimes(target_id, arrival_at) {            const response = await gpAjax.ajaxGet('attack_planer', 'show_attack_dialog', {              'target_id': target_id,              'town_id': ITowns.getCurrentTown().id,              'nl_init': true            });            var jsonResponse = JSON.parse(response);            var data = jsonResponse.json.data.towns;                        var result = [];            for (var outerKey in data) {              var town = data[outerKey].town_name;      var town_id= parseInt(outerKey,10);        var units = data[outerKey].units;              var distance = data[outerKey].distance;              var siren = units['siren'].amount;              var important_units = {                big_transporter: {                  amount: units['big_transporter'].amount,                  duration: units['big_transporter'].duration,                  speed: units['big_transporter'].speed_with_bonus                },                small_transporter: {                  amount: units['small_transporter'].amount,                  duration: units['small_transporter'].duration,                  speed: units['small_transporter'].speed_with_bonus                },                attack_ship: {                  amount: units['attack_ship'].amount,                  duration: units['attack_ship'].duration,                  speed: units['attack_ship'].speed_with_bonus                },                bireme: {                  amount: units['bireme'].amount,                  duration: units['bireme'].duration,                  speed: units['bireme'].speed_with_bonus                },                trireme: {                  amount: units['trireme'].amount,                  duration: units['trireme'].duration,                  speed: units['trireme'].speed_with_bonus                }              };              var orderedUnits = [];              for (var innerKey in important_units) {                var unit = important_units[innerKey];                var { amount, duration, speed } = unit;                if (siren === 0) {                  if (Timestamp.now() + duration <= arrival_at && amount > 0) {                    orderedUnits.push({                      unit: innerKey,                      amount: amount,                      duration: duration,                      siren: 0                    });                  }                } else {                  var minSirensNeeded = Infinity;                  var minAdjustedDuration = Infinity;                  for (var sirens = 0; sirens <= siren; ++sirens) {                    var adjustedDuration = tCalculateTimeToArrival(distance, speed, sirens);                    if (Timestamp.now() + adjustedDuration <= arrival_at && amount > 0) {                      minSirensNeeded = sirens;                      minAdjustedDuration = adjustedDuration;                      break;                    }                  }                  if (minSirensNeeded < Infinity) {                    orderedUnits.push({                      unit: innerKey,                      amount: amount,                      duration: minAdjustedDuration,                      siren: minSirensNeeded                    });                  }                }              }              orderedUnits.sort((a, b) => b.duration - a.duration);              if (orderedUnits.length > 0) {                result.push({                  town: town,      id: town_id,            units: orderedUnits                });              }            }            result.sort((a, b) => {              const durationA = a.units.length > 0 ? a.units[0].duration : 0;              const durationB = b.units.length > 0 ? b.units[0].duration : 0;              return durationB - durationA;            });                       return result;          }          ";
            document.body.appendChild(script);
            console.log('tCalculateTravelTimes','loaded');
            }
        }
        append_tCalculateTravelTimes();
    
        function append_tCalculateTimeToArrival() {
            if ($("#tCalculateTimeToArrival").length) {
              console.log("tCalculateTimeToArrival tag already loaded");
            } else{
            var script = document.createElement("script");
            script.id = "tCalculateTimeToArrival";
            script.innerHTML = "function tCalculateTimeToArrival(distance, speed, sirens) {var speed_buff = 1 + (sirens * 0.02);return Math.round((50 * distance) / (speed * speed_buff)) + (900 / Game.game_speed) - 1; }";
            document.body.appendChild(script);
            console.log('tCalculateTimeToArrival','loaded');
            }
        }
        append_tCalculateTimeToArrival();
    
        function append_tTimeSelectedCalculation() {
            if ($("#tTimeSelectedCalculation").length) {
              console.log("tTimeSelectedCalculation tag already loaded");
            } else{
            var script = document.createElement("script");
            script.id = "tTimeSelectedCalculation";
            script.innerHTML = "function tTimeSelectedCalculation() {            var now = new Date();            var inputHH = parseInt($('#T_hh').val()) || 0;            var inputMM = parseInt($('#T_mm').val()) || 0;            var inputSS = parseInt($('#T_ss').val()) || 0;                    var selectedTime = new Date(                now.getFullYear(),                now.getMonth(),                now.getDate(),                inputHH,                inputMM,                inputSS            );                    if (selectedTime <= now) {                selectedTime.setDate(selectedTime.getDate() + 1);            }                    return Math.floor(selectedTime.getTime() / 1000);        }";
            document.body.appendChild(script);
            console.log('tTimeSelectedCalculation','loaded');
            }
        }
        append_tTimeSelectedCalculation();
    
        function append_tDrawMovements() {
            if ($("#tDrawMovements").length) {
              console.log("tDrawMovements tag already loaded");
            } else{
            var script = document.createElement("script");
            script.id = "tDrawMovements";
            script.innerHTML = "async function tDrawMovements(){            var town_id = parseInt($('#T_calculate').attr('value'),10);            var arrival_unitl_time = tTimeSelectedCalculation();            var obj = await tCalculateTravelTimes(town_id, arrival_unitl_time);               for(let t = 0; t < obj.length; t++){                          $('#T_calculated_units').append(`                    <div onclick='HelperTown.townSwitch(`+obj[t].id+`);' id='T_town_`+obj[t].id+`' style='color:white;border-radius:15px;background:none;float:left;width:96%;margin-left:2%;display: flex;flex-direction: row; cursor:pointer;'>                        <div style='float:left;margin:0;width: 75%;'>                            <p style='float:left;margin:0;width: 100%;font-size: x-large;'>`+obj[t].town+`</p>                        </div>                    </div>                `);                let units = obj[t].units;                for(let u = 0; u < units.length; u++){                               $('#T_town_'+obj[t].id+'').append(`                    <div style='color:white;float:left;width:25%;display: flex;flex-direction: column;align-items: center;'>                        <div style='color:black;font-weight:bolder;font-size:larger;float:left;margin:0;' class='unit_icon40x40 `+units[u].unit+` unit'></div>                       <p style='float:left;margin:0;'>`+units[u].amount+`</p>                        <p style='float:left;margin:0;'>`+convert_seconds_to_time(units[u].duration)+`</p>      <p style='float:left;margin:0;'>siren: `+units[u].siren+`</p>                </div>                    `);                }            }        }";
            document.body.appendChild(script);
            console.log('tDrawMovements','loaded');
            }
        }
        append_tDrawMovements();
    
        function append_convert_seconds_to_time() {
            if ($("#convert_seconds_to_time").length) {
              console.log("convert_seconds_to_time tag already loaded");
            } else{
            var script = document.createElement("script");
            script.id = "convert_seconds_to_time";
            script.innerHTML = "function convert_seconds_to_time(seconds) {            var date = new Date(null);            date.setSeconds(seconds);            return date.toISOString().substr(11, 8);        }";
            document.body.appendChild(script);
            console.log('convert_seconds_to_time','loaded');
            }
        }
        append_convert_seconds_to_time();
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
        function append_tStartFarmMacro() {
            if ($("#tStartFarmMacro").length) {
              console.log("tStartFarmMacro tag already loaded");
            } else{
            var script = document.createElement("script");
            script.id = "tStartFarmMacro";
            script.innerHTML = "function tStartFarmMacro(){var isOn = JSON.parse(localStorage.getItem('TfarmIsOn'));if(isOn === null){localStorage.setItem('TfarmIsOn',JSON.stringify(false));}if(!isOn){localStorage.setItem('TfarmIsOn',JSON.stringify(true));} else {localStorage.setItem('TfarmIsOn',JSON.stringify(false));}}";
            document.body.appendChild(script);
            console.log('tStartFarmMacro','loaded');
            }
        }
        append_tStartFarmMacro();
    
    
    
        function append_tFarmModulUI() {
            if ($("#tFarmModulUI").length) {
              console.log("tFarmModulUI tag already loaded");
            } else{
            var script = document.createElement("script");
            script.id = "tFarmModulUI";
            script.innerHTML = "function tFarmModulUI(id){    $('#gpwnd_'+id).append(`        <button id='T_farm_savebtn' style='background: #0a1929;border: 1px solid #112a44;border-radius: 7px;cursor:pointer;'>               <span class='material-symbols-outlined' style='color:#66b2ff;'>download</span>        </button>    `);}";
            document.body.appendChild(script);
            console.log('tFarmModulUI','loaded');
            }
        }
        append_tFarmModulUI();
    
    
    
        function append_tFarmModuleSubscribe() {
            if ($("#tFarmModuleSubscribe").length) {
              console.log("tFarmModuleSubscribe tag already loaded");
            } else{
            var script = document.createElement("script");
            script.id = "tFarmModuleSubscribe";
            script.innerHTML = "function tFarmModuleSubscribe(){if(JSON.parse(localStorage.getItem('TfarmIsOn'))){$('#T_farm_macro_color').css('color','green');$('#T_farm_macro_color').attr('colored',true);}else{$('#T_farm_macro_color').css('color','red');$('#T_farm_macro_color').attr('colored',false);} $.Observer(GameEvents.window.reload).subscribe('TfarmSubscriber',function(){var isOn = JSON.parse(localStorage.getItem('TfarmIsOn'));if(isOn){var wnds = GPWindowMgr.getAllOpen();for(let i = 0; i < wnds.length; ++i){if(wnds[i].getType() === 29){var lock = $('#gpwnd_'+wnds[i].getID()).attr('locked');if(lock === undefined){$('#gpwnd_'+wnds[i].getID()).attr('locked',1);var id = parseInt(wnds[i].getID(),10);tFarmModulUI(id);}}}}});}";
            document.body.appendChild(script);
            console.log('tFarmModuleSubscribe','loaded');
            }
        }
        append_tFarmModuleSubscribe();
    
        tFarmModuleSubscribe();
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
        function append_tStartAttackMacro() {
            if ($("#tStartAttackMacro").length) {
              console.log("tStartAttackMacro tag already loaded");
            } else{
            var script = document.createElement("script");
            script.id = "tStartAttackMacro";
            script.innerHTML = "function tStartAttackMacro(){            var isOn = JSON.parse(localStorage.getItem('TattackIsOn'));            if(isOn === null){localStorage.setItem('TattackIsOn',JSON.stringify(false));}            if(!isOn){                                localStorage.setItem('TattackIsOn',JSON.stringify(true));            } else {                                localStorage.setItem('TattackIsOn',JSON.stringify(false));            }        }";
            document.body.appendChild(script);
            console.log('tStartAttackMacro','loaded');
            }
        }
        append_tStartAttackMacro();
    
    
        function append_tAttackModulSubscribe() {
            if ($("#tAttackModulSubscribe").length) {
              console.log("tAttackModulSubscribe tag already loaded");
            } else{
            var script = document.createElement("script");
            script.id = "tAttackModulSubscribe";
            script.innerHTML = "function tAttackModuleSubscribe(){            if(JSON.parse(localStorage.getItem('TattackIsOn'))){$('#T_attack_macro_color').css('color','green');$('#T_attack_macro_color').attr('colored',true);}else{$('#T_attack_macro_color').css('color','red');$('#T_attack_macro_color').attr('colored',false);}                    $.Observer(GameEvents.window.reload).subscribe('TattackSubscriber',function(){                var isOn = JSON.parse(localStorage.getItem('TattackIsOn'));                if(isOn){                var wnds = GPWindowMgr.getAllOpen();                    for(let i = 0; i < wnds.length; ++i){                        if(wnds[i].getAction() === 'attack' || wnds[i].getAction() === 'support'){                            var lock = $('#gpwnd_'+wnds[i].getID()).children().attr('locked');                            if(lock === undefined){                                $('#gpwnd_'+wnds[i].getID()).children().attr('locked',1);                                var id = parseInt(wnds[i].getID(),10);                                tAttackModulUI(id);                            }                        }                    }                }            });        }";
            document.body.appendChild(script);
            console.log('tAttackModulSubscribe','loaded');
            }
        }
        append_tAttackModulSubscribe();
    
    
    
    
        function append_tAttackModulUI() {
            if ($("#tAttackModulUI").length) {
              console.log("tAttackModulUI tag already loaded");
            } else{
            var script = document.createElement("script");
            script.id = "tAttackModulUI";
            script.innerHTML = "function tAttackModulUI(id) {            var naval_units = $('#gpwnd_'+id).find('div.naval_units');            var has_siren = $('#gpwnd_'+id).find('a.siren');            if (has_siren.length === 1) {              $(naval_units).append(`<div class='unit_container' style='        display: flex;        flex-direction: column;        justify-content: center;        align-items: center;    '><button id='siren_up' onclick='' style='background: #0a1929;border: 1px solid #112a44;border-radius: 7px;cursor:pointer;'><span class='material-symbols-outlined' style='color:#66b2ff;'>expand_less</span></button> <button id='siren_down' onclick='' style='background: #0a1929;border: 1px solid #112a44;border-radius: 7px;cursor:pointer;'><span class='material-symbols-outlined' style='color:#66b2ff;'>expand_more</span></button> </div>`);             }                    }";
            document.body.appendChild(script);
            console.log('tAttackModulUI','loaded');
            }
        }
        append_tAttackModulUI();
    
    
    
    
        tAttackModuleSubscribe();
    
    });
}
h();







